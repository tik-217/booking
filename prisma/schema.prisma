// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotels {
  id             Int             @id @default(autoincrement())
  name           String
  stars          Int
  description    String
  additionalInfo String?
  photo          String[]
  rooms          Rooms[]
  coordinates    Float[]
  services       HotelServices[]
  country        Country[]
  city           City[]
  address        String
  reviewHotels   ReviewHotels[]
  legalAddress   String[]
  policy         DateTime[]
}

model Rooms {
  id             Int            @id @default(autoincrement())
  name           String
  cost           Int
  description    String
  services       RoomServices[]
  reviewRooms    ReviewRooms[]
  photo          String[]
  numberOfGuests Int

  Hotels   Hotels? @relation(fields: [hotelsId], references: [id])
  hotelsId Int?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
}

model RoomServices {
  id   Int      @id @default(autoincrement())
  pool String[]

  Rooms   Rooms? @relation(fields: [roomsId], references: [id])
  roomsId Int?
}

model HotelServices {
  id Int @id @default(autoincrement())

  Hotels   Hotels? @relation(fields: [hotelsId], references: [id])
  hotelsId Int?
}

model ReviewHotels {
  id Int @id @default(autoincrement())

  Hotels   Hotels? @relation(fields: [hotelsId], references: [id])
  hotelsId Int?
}

model ReviewRooms {
  id Int @id @default(autoincrement())

  Rooms   Rooms? @relation(fields: [roomsId], references: [id])
  roomsId Int?
}

model Country {
  id Int @id @default(autoincrement())

  Hotels   Hotels? @relation(fields: [hotelsId], references: [id])
  hotelsId Int?
}

model City {
  id Int @id @default(autoincrement())

  Hotels   Hotels? @relation(fields: [hotelsId], references: [id])
  hotelsId Int?
}

model Traveler {
  id    Int    @id @default(autoincrement())
  name  String
  email String
  image String
}

// users

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surname       String?
  gender        String?
  city          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?
  dateOfBirth   DateTime?
  image         String?
  // favouritsHotelsOrRooms Rooms[]
  // historyOfBooking       Rooms[]
  accounts      Account[]
  sessions      Session[]
  Rooms         Rooms[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
